
using MongoDB.Bson;
using MongoDB.Driver;
using System;
using System.Collections.Generic;
using System.Data;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using System.Linq;
namespace ProgramPraca
{
    /// <summary>
    /// Logika interakcji dla klasy MainView.xaml
    /// </summary>
    public partial class Main : Window
    {
        public static List<string> columns = new();
        public   static DataGrid dt = new();

        public Main()
        {
            InitializeComponent();
            dt = dtGrid;

           if (UserHolder.User.UserType != "administrator")
            {
                But1.Visibility = Visibility.Hidden;
                But2.Visibility = Visibility.Hidden;

            }
      
            
            try
            {
                MongoDb.FillDataGrid(dt);

            }
            catch (Exception e)
            {
                MessageBox.Show($"Błąd wczytywania danych! sprawdź ustawienia połączenia i spróbuj ponownie.\n\nERROR: {e.Message}");

                Application.Current.Shutdown();

            }

            
            

        }




        //Windows Section

        private void ColumnManager(object sender, RoutedEventArgs e)
        {
            ColumnManager w = new();
            w.Show();
        }

        private void UserManager(object sender, RoutedEventArgs e)
        {
            UserManager w = new();
            w.Show();
        }

        private void FiltrData(object sender, RoutedEventArgs e)
        {
            PodOknaMain.Filtr W = new();
            W.Show();
        }



        private void ChangeData(object sender, DataGridCellEditEndingEventArgs e)
        {
            DataRowView row = (DataRowView)dt.SelectedItem;
            
           
            var collection = MongoDb.Database.GetCollection<BsonDocument>("klienci");
            
            if(row[0].ToString() == "")
            {
                ObjectId newId = new ObjectId();
                newId = ObjectId.GenerateNewId();
                BsonDocument newDoc = new();
                newDoc.Add("_id", newId);
                TextBox value = e.EditingElement as TextBox;
                newDoc.Add(e.Column.Header.ToString(), value.Text);
                newDoc.Add("count", 1);
                collection.InsertOne(newDoc);
            }
            else
            {
                ObjectId id = new ObjectId(row[0].ToString());
            
                var filter = Builders<BsonDocument>.Filter.Eq("_id", id);

                BsonDocument rowToUpdate = collection.Find(filter).Single();
                if (!rowToUpdate.Contains(e.Column.Header.ToString()))
                {
                    MongoDb.changeCount(filter, true, collection);

                }
                TextBox value = e.EditingElement as TextBox;
                UpdateDefinition<BsonDocument> update = null;
                if(value.Text == "")
                {
                    update = Builders<BsonDocument>.Update.Unset(e.Column.Header.ToString());
                    MongoDb.changeCount(filter, false, collection);

                }
                else
                {
                    update = Builders<BsonDocument>.Update.Set(e.Column.Header.ToString(), value.Text);
                }
            
                collection.UpdateOne(filter, update);


            }

            

        }

        public static void FillListOfColumns()
        {
            columns.Clear();
            foreach( var column in dt.Columns)
            {
                if (column.Header.ToString() == "count" || column.Header.ToString() == "id" || column.Header.ToString() == "_id") continue;
                columns.Add(column.Header.ToString());
            }
        }
        private void SetColumnsReadOnly(object sender, DataGridAutoGeneratingColumnEventArgs e)
        {
            
            
            if (e.Column.Header.ToString() == "_id")
            {
                e.Column.IsReadOnly = true;
            }else if (e.Column.Header.ToString() == "count")
            {
                e.Column.Visibility = Visibility.Hidden;
            }
            
        }

       

       

        private void Window_KeyUp(object sender, KeyEventArgs e)
        {
            if(e.Key == Key.Enter)
            {
                MongoDb.FillDataGrid(dt);
            }
        }

        private void dtGrid_AutoGeneratedColumns(object sender, EventArgs e)
        {
            FillListOfColumns();
        }

     

        

        private void dtGrid_PreviewKeyDown(object sender, KeyEventArgs e)
        {
            if(Key.Delete == e.Key)
            {
                DataRowView row = dt.SelectedItem as DataRowView;
                IMongoCollection<BsonDocument> collection = MongoDb.Database.GetCollection<BsonDocument>("klienci");
                FilterDefinition<BsonDocument> filter = Builders<BsonDocument>.Filter.Eq("_id", row.Row[0].ToString());
                collection.DeleteOne(filter);
                MongoDb.FillDataGrid(dt);
            }
        }
    }
}
